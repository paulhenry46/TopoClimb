openapi: 3.0.3
info:
  title: TopoClimb API
  description: |
    The TopoClimb API provides access to climbing site data, routes, contests, and user information. 
    The API is designed for building mobile applications and third-party integrations.
    
    ## Key Features
    - **Read-only access** for most resources (sites, areas, sectors, lines, routes, contests, teams, tags)
    - **No admin features** exposed via API
    - **Authentication required** for user profile operations
    - **Laravel Sanctum** for secure token-based authentication
  version: 1.0.0
  contact:
    name: TopoClimb Team
    url: https://github.com/paulhenry46/TopoClimb
  license:
    name: MIT
    url: https://github.com/paulhenry46/TopoClimb/blob/main/LICENSE

servers:
  - url: /api/v1
    description: API v1

tags:
  - name: Sites
    description: Climbing sites endpoints
  - name: Areas
    description: Climbing areas within sites
  - name: Sectors
    description: Sectors within areas
  - name: Lines
    description: Lines within sectors
  - name: Routes
    description: Routes within lines
  - name: Contests
    description: Contest information
  - name: Teams
    description: Contest teams
  - name: Tags
    description: Route and site tags
  - name: User
    description: User profile management (authenticated)

paths:
  /sites:
    get:
      tags:
        - Sites
      summary: List all climbing sites
      description: Returns a list of all climbing sites (excluding site with ID 1)
      operationId: listSites
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
              example:
                data:
                  - id: 1
                    name: "Example Climbing Site"
                    slug: "example-site"
                    address: "123 Climbing St"
                    description: "A great climbing location"
                    profile_picture: "https://example.com/site.jpg"
                    banner: "https://example.com/banner.jpg"
                    default_cotation: true
                    created_at: "2025-01-01T00:00:00.000000Z"
                    updated_at: "2025-01-01T00:00:00.000000Z"

  /sites/{site}:
    get:
      tags:
        - Sites
      summary: Get a specific site
      description: Returns detailed information about a specific climbing site
      operationId: getSite
      parameters:
        - name: site
          in: path
          required: true
          description: Site ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Site'
        '404':
          $ref: '#/components/responses/NotFound'

  /sites/{site}/areas:
    get:
      tags:
        - Areas
      summary: List all areas for a site
      description: Returns a list of all climbing areas within a specific site
      operationId: listSiteAreas
      parameters:
        - name: site
          in: path
          required: true
          description: Site ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Area'
        '404':
          $ref: '#/components/responses/NotFound'

  /areas/{area}:
    get:
      tags:
        - Areas
      summary: Get a specific area
      description: Returns detailed information about a specific climbing area
      operationId: getArea
      parameters:
        - name: area
          in: path
          required: true
          description: Area ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Area'
              example:
                data:
                  id: 1
                  name: "Boulder Area"
                  slug: "boulder-area"
                  type: "bouldering"
                  site_id: 1
                  banner: "https://example.com/area-banner.jpg"
                  svg_schema: "https://example.com/users.svg"
                  edited_svg_schema: "https://example.com/admin.svg"
                  created_at: "2025-01-01T00:00:00.000000Z"
                  updated_at: "2025-01-01T00:00:00.000000Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /areas/{area}/sectors:
    get:
      tags:
        - Sectors
      summary: List all sectors for an area
      description: Returns a list of all sectors within a specific climbing area
      operationId: listAreaSectors
      parameters:
        - name: area
          in: path
          required: true
          description: Area ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Sector'
        '404':
          $ref: '#/components/responses/NotFound'

  /sectors/{sector}:
    get:
      tags:
        - Sectors
      summary: Get a specific sector
      description: Returns detailed information about a specific sector
      operationId: getSector
      parameters:
        - name: sector
          in: path
          required: true
          description: Sector ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Sector'
              example:
                data:
                  id: 1
                  name: "Sector A"
                  slug: "sector-a"
                  local_id: 1
                  area_id: 1
                  common_edited_lines: "https://example.com/common_paths.svg"
                  created_at: "2025-01-01T00:00:00.000000Z"
                  updated_at: "2025-01-01T00:00:00.000000Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /sectors/{sector}/lines:
    get:
      tags:
        - Lines
      summary: List all lines for a sector
      description: Returns a list of all lines within a specific sector
      operationId: listSectorLines
      parameters:
        - name: sector
          in: path
          required: true
          description: Sector ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Line'
        '404':
          $ref: '#/components/responses/NotFound'

  /lines/{line}:
    get:
      tags:
        - Lines
      summary: Get a specific line
      description: Returns detailed information about a specific line
      operationId: getLine
      parameters:
        - name: line
          in: path
          required: true
          description: Line ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Line'
              example:
                data:
                  id: 1
                  local_id: 1
                  sector_id: 1
                  created_at: "2025-01-01T00:00:00.000000Z"
                  updated_at: "2025-01-01T00:00:00.000000Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /lines/{line}/routes:
    get:
      tags:
        - Routes
      summary: List all routes for a line
      description: Returns a list of all routes within a specific line
      operationId: listLineRoutes
      parameters:
        - name: line
          in: path
          required: true
          description: Line ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Route'
        '404':
          $ref: '#/components/responses/NotFound'

  /routes/{route}:
    get:
      tags:
        - Routes
      summary: Get a specific route
      description: Returns detailed information about a specific climbing route
      operationId: getRoute
      parameters:
        - name: route
          in: path
          required: true
          description: Route ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Route'
              example:
                data:
                  id: 1
                  name: "Red Route"
                  slug: "red-route"
                  local_id: 1
                  line_id: 1
                  grade: 15
                  color: "#FF0000"
                  comment: "Great route for beginners"
                  picture: "https://example.com/route-1.jpg"
                  filtered_picture: "https://example.com/route-filtered-1.jpg"
                  circle: "https://example.com/route-1-circle.svg"
                  path_line: "https://example.com/route-1-path.svg"
                  created_at: "2025-01-01T00:00:00.000000Z"
                  updated_at: "2025-01-01T00:00:00.000000Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /sites/{site}/contests:
    get:
      tags:
        - Contests
      summary: List all contests for a site
      description: Returns a list of all contests at a specific climbing site
      operationId: listSiteContests
      parameters:
        - name: site
          in: path
          required: true
          description: Site ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contest'
        '404':
          $ref: '#/components/responses/NotFound'

  /contests/{contest}:
    get:
      tags:
        - Contests
      summary: Get a specific contest
      description: Returns detailed information about a specific contest
      operationId: getContest
      parameters:
        - name: contest
          in: path
          required: true
          description: Contest ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Contest'
              example:
                data:
                  id: 1
                  name: "Summer Contest 2025"
                  description: "Annual summer climbing contest"
                  start_date: "2025-06-01T00:00:00.000000Z"
                  end_date: "2025-06-30T23:59:59.000000Z"
                  mode: "official"
                  site_id: 1
                  use_dynamic_points: true
                  team_mode: true
                  team_points_mode: "unique"
                  created_at: "2025-01-01T00:00:00.000000Z"
                  updated_at: "2025-01-01T00:00:00.000000Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /contests/{contest}/teams:
    get:
      tags:
        - Teams
      summary: List all teams for a contest
      description: Returns a list of all teams participating in a specific contest
      operationId: listContestTeams
      parameters:
        - name: contest
          in: path
          required: true
          description: Contest ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'

  /teams/{team}:
    get:
      tags:
        - Teams
      summary: Get a specific team
      description: Returns detailed information about a specific contest team
      operationId: getTeam
      parameters:
        - name: team
          in: path
          required: true
          description: Team ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Team'
              example:
                data:
                  id: 1
                  name: "Team Awesome"
                  contest_id: 1
                  created_at: "2025-01-01T00:00:00.000000Z"
                  updated_at: "2025-01-01T00:00:00.000000Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /tags:
    get:
      tags:
        - Tags
      summary: List all tags
      description: Returns a list of all available tags
      operationId: listTags
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
              example:
                data:
                  - id: 1
                    name: "Beginner Friendly"
                    created_at: "2025-01-01T00:00:00.000000Z"
                    updated_at: "2025-01-01T00:00:00.000000Z"

  /tags/{tag}:
    get:
      tags:
        - Tags
      summary: Get a specific tag
      description: Returns detailed information about a specific tag
      operationId: getTag
      parameters:
        - name: tag
          in: path
          required: true
          description: Tag ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Tag'
        '404':
          $ref: '#/components/responses/NotFound'

  /user:
    get:
      tags:
        - User
      summary: Get authenticated user's profile
      description: Returns the profile information of the authenticated user
      operationId: getUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
              example:
                data:
                  id: 1
                  name: "John Doe"
                  email: "john@example.com"
                  birth_date: "1990-01-01"
                  gender: "male"
                  profile_photo_url: "https://example.com/photo.jpg"
                  created_at: "2025-01-01T00:00:00.000000Z"
                  updated_at: "2025-01-01T00:00:00.000000Z"
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - User
      summary: Update authenticated user's profile
      description: Updates the profile information of the authenticated user
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: "John Doe"
                birth_date:
                  type: string
                  format: date
                  nullable: true
                  example: "1990-01-01"
                gender:
                  type: string
                  enum: [male, female, other]
                  nullable: true
                  example: "male"
            example:
              name: "John Doe"
              birth_date: "1990-01-01"
              gender: "male"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: |
        Laravel Sanctum API token authentication.
        
        To obtain a token:
        1. Log in to your TopoClimb account via the web interface
        2. Navigate to the API Tokens section
        3. Create a new API token
        4. Copy the token (it will only be shown once)
        
        Include the token in the Authorization header as: `Bearer YOUR_API_TOKEN`

  schemas:
    Site:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Example Climbing Site"
        slug:
          type: string
          example: "example-site"
        address:
          type: string
          nullable: true
          example: "123 Climbing St"
        description:
          type: string
          nullable: true
          example: "A great climbing location"
        profile_picture:
          type: string
          nullable: true
          example: "https://example.com/site.jpg"
        banner:
          type: string
          nullable: true
          example: "https://example.com/banner.jpg"
        default_cotation:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Area:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Boulder Area"
        slug:
          type: string
          example: "boulder-area"
        type:
          type: string
          example: "bouldering"
        site_id:
          type: integer
          example: 1
        banner:
          type: string
          nullable: true
          example: "https://example.com/area-banner.jpg"
        svg_schema:
          type: string
          nullable: true
          description: SVG schema for users
          example: "https://example.com/users.svg"
        edited_svg_schema:
          type: string
          nullable: true
          description: SVG schema for admin with editing capabilities
          example: "https://example.com/admin.svg"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Sector:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Sector A"
        slug:
          type: string
          example: "sector-a"
        local_id:
          type: integer
          example: 1
        area_id:
          type: integer
          example: 1
        common_edited_lines:
          type: string
          nullable: true
          description: SVG with all route paths for the sector
          example: "https://example.com/common_paths.svg"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Line:
      type: object
      properties:
        id:
          type: integer
          example: 1
        local_id:
          type: integer
          example: 1
        sector_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Route:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Red Route"
        slug:
          type: string
          example: "red-route"
        local_id:
          type: integer
          example: 1
        line_id:
          type: integer
          example: 1
        grade:
          type: integer
          nullable: true
          example: 15
        color:
          type: string
          nullable: true
          example: "#FF0000"
        comment:
          type: string
          nullable: true
          example: "Great route for beginners"
        picture:
          type: string
          nullable: true
          description: Photo of the route
          example: "https://example.com/route-1.jpg"
        filtered_picture:
          type: string
          nullable: true
          description: Filtered/processed photo of the route
          example: "https://example.com/route-filtered-1.jpg"
        circle:
          type: string
          nullable: true
          description: SVG circle marker for the route
          example: "https://example.com/route-1-circle.svg"
        path_line:
          type: string
          nullable: true
          description: SVG path line showing the route path
          example: "https://example.com/route-1-path.svg"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Contest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Summer Contest 2025"
        description:
          type: string
          nullable: true
          example: "Annual summer climbing contest"
        start_date:
          type: string
          format: date-time
          nullable: true
          example: "2025-06-01T00:00:00.000000Z"
        end_date:
          type: string
          format: date-time
          nullable: true
          example: "2025-06-30T23:59:59.000000Z"
        mode:
          type: string
          example: "official"
        site_id:
          type: integer
          example: 1
        use_dynamic_points:
          type: boolean
          example: true
        team_mode:
          type: boolean
          example: true
        team_points_mode:
          type: string
          nullable: true
          example: "unique"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Team:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Team Awesome"
        contest_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Tag:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Beginner Friendly"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        birth_date:
          type: string
          format: date
          nullable: true
          example: "1990-01-01"
        gender:
          type: string
          enum: [male, female, other]
          nullable: true
          example: "male"
        profile_photo_url:
          type: string
          nullable: true
          example: "https://example.com/photo.jpg"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Resource not found"

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Resource not found"

    Unauthorized:
      description: Unauthorized - missing or invalid API token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Unauthenticated."

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            message: "The given data was invalid."
            errors:
              name:
                - "The name field is required."
